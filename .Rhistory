# 등분산성 테스트
var.test(y = non_USA93$Price, x = USA93$Price)
# 정규성이 아닐 시 Wilcoxon rank sum - test를 실시한다.
wilcox.test(y = USA93$Price, x = non_USA93$Price)
# 등분산성 테스트
var.test(y = non_USA93$Price, x = USA93$Price)
# 정규성을 가진다고 가정하고 two sample - test를 진행한다.
t.test(non_USA93$Price, USA93$Price, var.equal = F)
mpgSub <- mpg %>% dplyr::filter(class == 'subcompact') %>% dplyr::select(hwy)
mpgMid <- mpg %>% dplyr::filter(class == 'midsize') %>% dplyr::select(hwy)
mpgSub <- mpg %>% dplyr::filter(class == 'subcompact') %>% dplyr::select(hwy)
mpgMid <- mpg %>% dplyr::filter(class == 'midsize') %>% dplyr::select(hwy)
shapiro.test(mpgSub$hwy)
shapiro.test(mpgMid$hwy)
# 등분산성 테스트
var.test(y = mpgMid$hwy, x = mpgSub$hwy)
t.test(mpgMid$hwy, mpgSub$hwy, mu = 0, var.equal = F)
t.test(mpgMid$hwy, mpgSub$hwy, mu = 0, var.equal = FALSE)
t.test(mpgMid$hwy, mpgSub$hwy, mu = 0, var.equal = T)
t.test(mpgMid$hwy, mpgSub$hwy, mu = 0, var.equal = F)
mpgR <- mpg %>% dplyr::filter(fl == 'r') %>% dplyr::select(cty)
mpgP <- mpg %>% dplyr::filter(fl == 'p') %>% dplyr::select(cty)
shapiro.test(mpgR$cty)
shapiro.test(mpgP$cty)
# 등분산성 테스트
var.test(y = mpgP$cty, x = mpgR$cty)
# 정규성을 가진다고 가정하고 two sample - test를 진행한다.
t.test(y = mpgMid$hwy, x = mpgSub$hwy, mu = 0, var.equal = F)
# 등분산성 테스트
var.test(y = mpgP$cty, x = mpgR$cty)
t.test(y = mpgP$cty, x = mpgR$cty, mu = 0, var.equal = F)
mpgF <- mpg %>% filter(class == 'subcompact' & drv == 'f') %>% dplyr::select(cty)
mpgRr <- mpg %>% filter(class == 'subcompact' & drv == 'r') %>% dplyr::select(cty)
mpgF <- mpg %>% dplyr::filter(class == 'subcompact' & drv == 'f') %>% dplyr::select(cty)
mpgRr <- mpg %>% dplyr::filter(class == 'subcompact' & drv == 'r') %>% dplyr::select(cty)
shapiro.test(mpgF$cty)
shapiro.test(mpgRr$cty)
# 등분산성 테스트
var.test(y = mpgRr$cty, x = mpgF$cty)
t.test(y = mpgRr$cty, mpgF$cty, mu = 0, var.equal = F)
sample3 <- c(13.2, 8.2, 10.9, 14.3, 10.7, 6.6, 9.5, 10.8, 8.8, 13.3)
sample4 <- c(14.0, 8.8, 11.2, 14.2, 11.8, 6.4, 9.8, 11.3, 9.3, 13.6)
#정규성 검사
shapiro.test(sample3)
shapiro.test(sample4)
sample1 <- c(51.4, 52.0, 45.5, 54.5, 52.3, 50.9, 52.7, 50.3, 53.8, 53.1)
sample2 <- c(50.1, 51.5, 45.9, 53.1, 51.8, 50.3, 52.0, 49.9, 52.5, 53.0)
shapiro.test(sample1)
shapiro.test(sample2)
t.test(sample1, sample2, paired = T)
# p-value(0.006) <= 0.05 이므로 대립가설을 채택한다. 당뇨병 치료제는 효과가 있다.
shapiro.test(sample3)
shapiro.test(sample4)
t.test(sample3, sample4, paired = T)
# p-value(0.008) <= 0.05 이므로 대립가설을 채택한다. 재질의 차이가 있다.
a1 <- data.frame(호수 = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(호수 = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(호수 = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
shapiro.test(a)
shapiro.test(a1)
shapiro.test(a$ppm)
shapiro.test(a1)
shapiro.test(a2)
shapiro.test(a3)
shapiro.test(a1$ppm)
shapiro.test(a2$ppm)
shapiro.test(a3$ppm)
install.packages('lawstat')
library(lawstat)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(y = a$ppm,x = a$호수)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm ~ a$호수)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(ppm ~ 호수, a)
a1 <- data.frame(호수 = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(호수 = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(호수 = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(ppm ~ 호수, a)
View(a)
group <- c(rep("1",10),rep("2",10),rep("3",10))
lake1 <- c(5,7,6,8,6,7,8,8,6,10)
lake2 <- c(6,8,9,11,13,12,10,8,9,10)
lake3 <- c(14,25,26,18,19,22,21,16,20,30)
ppm <- c(lake1,lake2,lake3)
lake <- data.frame(group=group,ppm=ppm)
View(lake)
levene.test(lake$ppm,lake$group)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$호수)
bartlett.test(a$ppm, a$호수)
bartlett.test(a$호수, a$ppm)
bartlett.test(a$호수, a$ppm)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$호수, a$ppm )
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$호수)
bartlett.test(a$ppm, a$호수)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
Tukey(aov(lm(y = ppm, x = 호수, data=a)))
anova(lm(y = ppm, x = 호수, data=a))
anova(lm(y = ppm, x = 호수, data=a))
anova(lm(y = a$ppm, x = a$호수, data=a))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
TukeyHSD(aov(lm(y = ppm, x = 호수, data=a)))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
TukeyHSD(aov(lm(y = a$ppm, x = a$호수)))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
TukeyHSD(aov(lm(y = a$ppm, x = a$호수, data=a)))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
TukeyHSD(aov(lm(ppm~호수, data=a)))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a <- lm(y = a$ppm, x = a$호수, data=a)
library(lawstat)
a1 <- data.frame(호수 = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(호수 = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(호수 = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = a$ppm, x = a$호수, data=a)
TukeyHSD(aov(a4))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = a$ppm, x = a$호수)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(a$ppm ~ a$호수, data=a)
TukeyHSD(aov(a4))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data=a)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data = a)
anova(lm(ppm ~ 호수, data = a))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data = a)
aov(a4)
a5 < -aov(a4)
TukeyHSD(a5)
a5 < -aov(a4)
a5 < -aov(a4)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~호수, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = lake)
a5 <- aov(a4)
TukeyHSD(a5)
View(lake)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data = lake)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ 호수, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
a <- rbind(a1,a2,a3)
shapiro.test(a1$ppm)
shapiro.test(a2$ppm)
shapiro.test(a3$ppm)
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(ppm ~ 호수, data = a))
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
head(a)
TukeyHSD(a5)
anova(lm(y = ppm, x = group, data = a))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
anova(lm(y = ppm, x = group, data = a))
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(y = ppm, x = group, data = a))
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
a <- rbind(a1,a2,a3)
a1 <- data.frame(group = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(group = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(group = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
levene.test(a$ppm, a$)
bartlett.test(a$ppm, a$group)
anova(lm(y = ppm, x = group, data = a))
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(y = ppm, x = group, data = a))
anova(lm(y = ppm, x = group, data = a))
anova(lm(y = ppm, x = group, data = a))
a1 <- data.frame(group = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(group = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(group = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
shapiro.test(a1$ppm)
shapiro.test(a2$ppm)
shapiro.test(a3$ppm)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(y = ppm, x = group, data = a))
View(a)
anova(lm(y = ppm, x = group, data = a))
anova(lm(y = ppm, x = a$group, data = a))
anova(lm(y = a$ppm, x = a$group, data = a))
anova(lm(y = a$ppm, x = group, data = a))
anova(lm(y = a$ppm, x = a$group, data = a))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = ppm, x = group, data = a)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = a$ppm, x = a$group)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = a$ppm, x = a$group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
TukeyHSD(a5)
head(a)
TukeyHSD(a5)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm~group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
library(lawstat)
a <- rbind(a1,a2,a3)
a1 <- data.frame(group = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(group = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(group = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수 별 산소량에 대한 분산이 모두 동일한 지 검정한다.
# 이에 대해서는 Levene의 검,정과 Bartlett의 검정이 있다.
# 모두 세집단 이상의 경우에 대해 등분산성을 검정 시 사용하는 검정법이고 해당 통계량이 특정한 분포에 근사한다는 성질을 이용한다.
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(y = a$ppm, x = a$group, data = a))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(y = a$ppm, x = a$group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
group <- c(rep("1",10),rep("2",10),rep("3",10))
lake1 <- c(5,7,6,8,6,7,8,8,6,10)
lake2 <- c(6,8,9,11,13,12,10,8,9,10)
lake3 <- c(14,25,26,18,19,22,21,16,20,30)
ppm <- c(lake1,lake2,lake3)
lake <- data.frame(group=group,ppm=ppm)
res <- lm(ppm~group,data=lake)
out <- aov(res)
(ph <- TukeyHSD(out))
res <- lm(ppm~group,data=lake)
out <- aov(res)
TukeyHSD(out)
a == lake
class(a) == class(lake)
levene.test(a$ppm, a$group)
bartlett.test(a$ppm, a$group)
anova(lm(y = a$ppm, x = a$group, data = a))
anova(lm(y = ppm, x = group, data = a))
anova(lm(y = ppm, x = group, data = a))
anova(lm(y = ppm, x = group, data = lake))
res <- lm(ppm~group,data=lake)
out <- aov(res)
TukeyHSD(out)
anova(lm(y = lake$ppm, x = lake$group, data = lake))
anova(lm(ppm ~ group, data = lake))
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data =  a)
a5 <- aov(a4)
TukeyHSD(a5)
res <- lm(ppm~group,data=lake)
out <- aov(res)
TukeyHSD(out)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm~group, data =  a)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm~group, data=a)
a5 <- aov(a4)
TukeyHSD(a5)
res <- lm(ppm~group,data=a)
out <- aov(res)
TukeyHSD(out)
res <- lm(ppm~group,data=lake)
out <- aov(res)
TukeyHSD(out)
View(lake)
View(a)
a1 <- data.frame(group = 1, ppm = c(5, 7, 6, 8, 6,
7, 8, 8, 6, 10))
a2 <- data.frame(group = 2, ppm = c(6, 8, 9, 11 ,13,
12 ,10, 8, 9, 10))
a3 <- data.frame(group = 3, ppm = c(14, 25, 26, 18, 19,
22, 21, 16, 20, 30))
a <- rbind(a1,a2,a3)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
group <- c(rep("1",10),rep("2",10),rep("3",10))
lake1 <- c(5,7,6,8,6,7,8,8,6,10)
lake2 <- c(6,8,9,11,13,12,10,8,9,10)
lake3 <- c(14,25,26,18,19,22,21,16,20,30)
ppm <- c(lake1,lake2,lake3)
lake <- data.frame(group=group,ppm=ppm)
res <- lm(ppm~group,data=lake)
out <- aov(res)
(ph <- TukeyHSD(out))
res <- lm(ppm~group,data=a)
out <- aov(res)
(ph <- TukeyHSD(out))
abcd <- rbind(a1,a2,a3)
res <- lm(ppm~group,data=abcd)
out <- aov(res)
(ph <- TukeyHSD(out))
res <- lm(ppm~group,data=lake)
out <- aov(res)
(ph <- TukeyHSD(out))
res2 <- lm(ppm~group,data=abcd)
aov(res)
aov(res2)
aov(res)
aov(res2)
res1 <- lm(ppm~group,data=lake)
res2 <- lm(ppm~group,data=abcd)
aov(res1)
aov(res2)
View(a)
View(abcd)
View(lake)
View(abcd)
View(lake)
View(abcd)
library(psych)
describe(lake)
describe(abcd)
summary(lake)
summary(abcd)
str(lake)
str(abcd)
a <- rbind(a1,a2,a3)
a$group <- as.factor(a$group)
# 각 호수에서 어느 곳에서 차이가 발생하는지 확인한다.
a4 <- lm(ppm ~ group, data = a)
a5 <- aov(a4)
TukeyHSD(a5)
library(Rcmdr)
View(mpgP)
View(mpgP)
library(Rcmdr)
library(car)
library(ggplot2)
library(psych)
library(lawstat)
library(leaps)
dbinom(3 ,6, 1/3)
pnorm(0.8, mean = 170, sd = 6)
qnorm(0.8, mean = 170, sd = 6)
qnorm(0.9, mean = 170, sd = 6)
qnorm(0.2, mean = 170, sd = 6)
qnorm(0.8, mean = 170, sd = 6)
# 7 - 2. 상위 10%
qnorm(0.9, mean = mu, sd = sigma)
# 7 - 2. 20년 이상
mu <- 11
sigma <- sqrt(16)
# 7 - 2. 상위 10%
qnorm(0.9, mean = mu, sd = sigma)
qnorm(1, mean = 170, sd = 6)
qnorm(1, mean = 170, sd = 6)- qnorm(.8, mean = 170, sd = 6)
qnorm(.99, mean = 170, sd = 6)- qnorm(.8, mean = 170, sd = 6)
qnorm(.8, mean = 170, sd = 6)
qchisq(.95, df = 3)
qt(.975, df = 2)
dt(.975, df = 2)
pt(.975, df = 2)
pnorm(1)
pnorm(1,mean = 0, sd = 1)
library(dplyr)
#3
iris
iris_setosa_SepalLength <- iris %>% filter(Species == 'setosa') %>% select(Sepal.Length)
View(iris_setosa_SepalLength)
prop.test(iris_setosa_SepalLength)
t.test(iris_setosa_SepalLength)
mean(iris_setosa_SepalLength)
mean(iris_setosa_SepalLength$Sepal.Length)
t.test(iris_setosa_SepalLength, mean = mean(iris_setosa_SepalLength$Sepal.Length))
t.test(iris_setosa_SepalLength, mu = mean(iris_setosa_SepalLength$Sepal.Length) )
t.test(iris_setosa_SepalLength)
summary(iris_setosa_SepalLength)
t.test(iris_setosa_SepalLength)
#4
pbinom(9, 10, 7/10)
pbinom(10, 10, 7/10)
dbinom(10, 10, 7/10)
#4
dbinom(9, 10, 7/10)
#4
1-pbinom(8,10, 7/10)
pbinom(8, 10, 7/10) - pbinom(5, 10, 7/10)
kor_al <- c(16.90, 13.21, 15.67, 9.87, 13.15, 9.98, 3.56, 14.50, 8.12, 6.97)
t.test(kor_al, mu = 8.1)
#6.
rangenorm <- function(from, to, mean, sd){
return(pnorm(to, mean = mean, sd = sd) - pnorm(from, mean = mean, sd = sd))
}
rangenorm(-1.96, 1.96, 0, 1)
#7.
head(mpg)
mpg_sub <- mpg %>% filter(class == 'subcompact') %>% select(cty)
mpg_mid <- mpg %>% filter(class == 'midsize') %>% select(cty)
t.test(mpg_sub$cty, mpg_mid$cty)
var.test(mpg_sub$cty ~ mpg_mid$cty)
var.test(mpg_sub$cty, mpg_mid$cty)
t.test(mpg_sub$cty, mpg_mid$cty, var.equal = F)
t.test(mpg_sub$cty, mpg_mid$cty, var.equal = F)
#7.
head(mpg)
mpg_r <- mpg %>% filter(fl == 'r') %>% select(hwy)
mpg_p <- mpg %>% filter(fl == 'p') %>% select(hwy)
var.test(mpg_r$hwy, mpg_p$hwy)
t.test(mpg_sub$cty, mpg_mid$cty, var.equal = F)
t.test(mpg_sub$cty, mpg_mid$cty, var.equal = F)
var.test(mpg_sub$cty, mpg_mid$cty)
var.test(mpg_sub$cty, mpg_mid$cty)
var.test(mpg_sub$cty, mpg_mid$cty)
var.test(mpg_r$hwy, mpg_p$hwy)
var.test(mpg_sub$cty, mpg_mid$cty)
var.test(mpg_r$hwy, mpg_p$hwy)
t.test(mpg_r$hwy, mpg_p$hwy, var.equal = F)
chisq.test(c(322,109,99,29), c(9/16,3/16,3,16,1/16)*100)
chisq.test(c(322,109,99,29), c(9/16,3/16,3,16,1/16))
chisq.test(c(322,109,99,29), c(9/16,3/16,3/16,1/16))
chisq.test(x =  c(322,109,99,29), p = c(9/16,3/16,3/16,1/16))
#8
chisq.test(x = c(322,109,99,29),
p = c(9/16,3/16,3/16,1/16) *100 )
#8
chisq.test(x = c(322,109,99,29),
p = c(9/16,3/16,3/16,1/16))
#9
head(women)
#9
summary(lm(women$weight ~ women$height))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
var.test(mpg_sub$cty, mpg_mid$cty)
